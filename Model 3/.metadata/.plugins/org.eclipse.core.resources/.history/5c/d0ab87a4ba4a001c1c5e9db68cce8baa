#include "processing.h"


void initialize_processing(fract _gain, int _mode){
	gain = _gain;
	mode = _mode;
}

void processing(fract input[][BLOCK_SIZE], fract output[][BLOCK_SIZE]){
	int i;

	fract* p_L_channel_in = input[L_CHANNEL];
	fract* p_R_channel_in = input[R_CHANNEL];

	fract* p_L_channel_out = output[L_CHANNEL];
	fract* p_R_channel_out = output[R_CHANNEL];
	fract* p_LS_channel_out = output[LS_CHANNEL];
	fract* p_RS_channel_out = output[RS_CHANNEL];
	fract* p_C_channel_out = output[C_CHANNEL];
	fract* p_LFE_channel_out = output[LFE_CHANNEL];

	fract input_L;
	fract input_R;
	fract input_L_with_stage_two_gain = 0;
	fract input_R_with_stage_two_gain = 0;

	for (i = 0; i < BLOCK_SIZE; i++)
	{
		// Get input values
		input_L = *p_L_channel_in;
		input_R = *p_R_channel_in;

		// L, R, LS, RS are always included (LS and RS are inverted)
		*p_L_channel_out = input_L * gain;
		*p_LS_channel_out = -*p_L_channel_out;
		*p_R_channel_out = input_R * gain;
		*p_RS_channel_out = -*p_R_channel_out;

		//0.79432823472

		// Increment all the I/O pointers
		p_L_channel_in++;
		p_R_channel_in++;
		p_L_channel_out++;
		p_R_channel_out++;
		p_C_channel_out++;
		p_LFE_channel_out++;
		p_LS_channel_out++;
		p_RS_channel_out++;
	}
}
