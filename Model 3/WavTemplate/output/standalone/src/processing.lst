1     	 0000					.extern ___TIMER0_COUNT
2     	 0000					.extern ___TIMER1_COUNT
3     	 0000					.extern ___TIMER1_ENABLE
4     	 0000					.public _input_L_with_stage_two_gain
5     	 0000					.public _input_R_with_stage_two_gain
6     	 0000					.public _p_C_channel_out
7     	 0000					.public _p_LFE_channel_out
8     	 0000					.public _p_LS_channel_out
9     	 0000					.public _p_L_channel_in
10    	 0000					.public _p_L_channel_out
11    	 0000					.public _p_RS_channel_out
12    	 0000					.public _p_R_channel_in
13    	 0000					.public _p_R_channel_out
14    	 0000					.extern _cl_get_cycle_count
15    	 0000					.public _initialize_processing
16    	 0000					.extern _printf
17    	 0000					.public _processing
18    	 0000					.extern __mul_sat_laccum
19    							.xdata_ovly
19     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
20    	 0000				__extractedConst_0_2
21    	 0000					.dw  (0x65ac8c2f)
	 0000	 65AC8C2F	 
22    							.xdata_ovly
22     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
23    	 0000				__extractedConst_1_1
24    	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
25    							.xdata_ovly
25     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
26    	 0000				__extractedConst_2_1
27    	 0000					.dw  (0xf555555c)
	 0000	 F555555C	 
28    							.xdata_ovly
28     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
29    	 0000				__extractedConst_3_1
30    	 0000					.dw  (0xaaaaaa4)
	 0000	 0AAAAAA4	 
31    							.xdata_ovly
31     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
32    	 0000				_distorsion_threshold_1
33    	 0000					.dw  (0x6666666)
	 0000	 06666666	 
34    							.xdata_ovly
34     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
35    	 0000				_distorsion_threshold_2
36    	 0000					.dw  (0xccccccd)
	 0000	 0CCCCCCD	 
37    							.xdata_ovly
37     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
38    	 0000				_gain
39    	 0000					.bss (0x1)
40    							.xdata_ovly
40     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
41    	 0000				_input_L_with_stage_two_gain
42    	 0000					.dw  (0x0)
	 0000	 00000000	 
43    							.xdata_ovly
43     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
44    	 0000				_input_R_with_stage_two_gain
45    	 0000					.dw  (0x0)
	 0000	 00000000	 
46    							.xdata_ovly
46     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
47    	 0000				_mode
48    	 0000					.bss (0x1)
49    							.xdata_ovly
49     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
50    	 0000				_p_C_channel_out
51    	 0000					.bss (0x1)
52    							.xdata_ovly
52     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
53    	 0000				_p_LFE_channel_out
54    	 0000					.bss (0x1)
55    							.xdata_ovly
55     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
56    	 0000				_p_LS_channel_out
57    	 0000					.bss (0x1)
58    							.xdata_ovly
58     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
59    	 0000				_p_L_channel_in
60    	 0000					.bss (0x1)
61    							.xdata_ovly
61     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
62    	 0000				_p_L_channel_out
63    	 0000					.bss (0x1)
64    							.xdata_ovly
64     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
65    	 0000				_p_RS_channel_out
66    	 0000					.bss (0x1)
67    							.xdata_ovly
67     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
68    	 0000				_p_R_channel_in
69    	 0000					.bss (0x1)
70    							.xdata_ovly
70     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
71    	 0000				_p_R_channel_out
72    	 0000					.bss (0x1)
73    							.xdata_ovly
73     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
74    	 0000				_string_const_0
75    	 0000					.dw  (0x50)
	 0000	 00000050	 
76    	 0001					.dw  (0x72)
	 0001	 00000072	 
77    	 0002					.dw  (0x6f)
	 0002	 0000006F	 
78    	 0003					.dw  (0x63)
	 0003	 00000063	 
79    	 0004					.dw  (0x65)
	 0004	 00000065	 
80    	 0005					.dw  (0x73)
	 0005	 00000073	 
81    	 0006					.dw  (0x73)
	 0006	 00000073	 
82    	 0007					.dw  (0x69)
	 0007	 00000069	 
83    	 0008					.dw  (0x6e)
	 0008	 0000006E	 
84    	 0009					.dw  (0x67)
	 0009	 00000067	 
85    	 000A					.dw  (0x20)
	 000A	 00000020	 
86    	 000B					.dw  (0x63)
	 000B	 00000063	 
87    	 000C					.dw  (0x79)
	 000C	 00000079	 
88    	 000D					.dw  (0x63)
	 000D	 00000063	 
89    	 000E					.dw  (0x6c)
	 000E	 0000006C	 
90    	 000F					.dw  (0x65)
	 000F	 00000065	 
91    	 0010					.dw  (0x73)
	 0010	 00000073	 
92    	 0011					.dw  (0x3a)
	 0011	 0000003A	 
93    	 0012					.dw  (0x20)
	 0012	 00000020	 
94    	 0013					.dw  (0x25)
	 0013	 00000025	 
95    	 0014					.dw  (0x6c)
	 0014	 0000006C	 
96    	 0015					.dw  (0x6c)
	 0015	 0000006C	 
97    	 0016					.dw  (0x75)
	 0016	 00000075	 
98    	 0017					.dw  (0x20)
	 0017	 00000020	 
99    	 0018					.dw  (0xa)
	 0018	 0000000A	 
100   	 0019					.dw  (0x0)
	 0019	 00000000	 
101   							.code_ovly
101    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
102   						
103   						
104   						
105   	 0000				_initialize_processing:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
106   	 0000	 BB540007		xmem[i7] = i7			# LN: 20 | 
107   	 0001	 020F7FFF		i7 += 1			# LN: 20 | 
108   	 0002	 87750002		i7 = i7 + (0x2)			# LN: 20 | 
109   	 0003	 90750001		i0 = i7 - (0x1)			# LN: 20 | 
110   	 0004	 98540000		xmem[i0] = a0h			# LN: 20 | 
111   	 0005	 90750002		i0 = i7 - (0x2)			# LN: 20 | 
112   	 0006	 99540000		xmem[i0] = a1h			# LN: 20 | 
113   	 0007				cline_20_0:			/* LN: 21 | CYCLE: 0 | RULES: () */ 
114   	 0007	 90750001		i0 = i7 - (0x1)			# LN: 21 | 
115   	 0008	 88140000		a0 = xmem[i0]			# LN: 21 | 
116   	 0009	 98440000		xmem[_gain + 0] = a0h			# LN: 21 | 
117   	 000A				cline_21_0:			/* LN: 22 | CYCLE: 0 | RULES: () */ 
118   	 000A	 90750002		i0 = i7 - (0x2)			# LN: 22 | 
119   	 000B	 88140000		a0 = xmem[i0]			# LN: 22 | 
120   	 000C	 98440000		xmem[_mode + 0] = a0h			# LN: 22 | 
121   	 000D				cline_22_0:			/* LN: 23 | CYCLE: 0 | RULES: () */ 
122   	 000D	 8008000E		jmp (__epilogue_250)			# LN: 23 | 
123   	 000E				__epilogue_250:			/* LN: 23 | CYCLE: 0 | RULES: () */ 
124   	 000E	 97750002		i7 = i7 - (0x2)			# LN: 23 | 
125   	 000F	 02177FFF		i7 -= 1			# LN: 23 | 
126   	 0010	 81880000		ret			# LN: 23 | 
127   						
128   						
129   						
130   	 0011				_processing:			/* LN: 26 | CYCLE: 0 | RULES: () */ 
131   	 0011	 BB540007		xmem[i7] = i7			# LN: 26 | 
132   	 0012	 020F7FFF		i7 += 1			# LN: 26 | 
133   	 0013	 87750009		i7 = i7 + (0x9)			# LN: 26 | 
134   	 0014	 94750001		i4 = i7 - (0x1)			# LN: 26 | 
135   	 0015	 B0540004		xmem[i4] = i0			# LN: 26 | 
136   	 0016	 90750002		i0 = i7 - (0x2)			# LN: 26 | 
137   	 0017	 B1540000		xmem[i0] = i1			# LN: 26 | 
138   	 0018				cline_26_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
139   	 0018	 80880000		call (_cl_get_cycle_count)			# LN: 30 | 
140   	 0019	 90750004		i0 = i7 - (0x4)			# LN: 30 | 
141   	 001A	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 30, 30 | 
142   	 001B	 90540000		xmem[i0] = a0l			# LN: 30 | 
143   	 001C				cline_30_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
144   	 001C	 90750001		i0 = i7 - (0x1)			# LN: 32 | 
145   	 001D	 B0140000		i0 = xmem[i0]			# LN: 32 | 
146   	 001E	 B0440000		xmem[_p_L_channel_in + 0] = i0			# LN: 32 | 
147   	 001F				cline_32_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
148   	 001F	 90750001		i0 = i7 - (0x1)			# LN: 33 | 
149   	 0020	 B0140000		i0 = xmem[i0]			# LN: 33 | 
150   	 0021	 00007FFF		nop #empty cycle
151   	 0022	 80050010		i0 = i0 + (0x10)			# LN: 33 | 
152   	 0023	 B0440000		xmem[_p_R_channel_in + 0] = i0			# LN: 33 | 
153   	 0024				cline_33_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
154   	 0024	 90750002		i0 = i7 - (0x2)			# LN: 35 | 
155   	 0025	 B0140000		i0 = xmem[i0]			# LN: 35 | 
156   	 0026	 B0440000		xmem[_p_L_channel_out + 0] = i0			# LN: 35 | 
157   	 0027				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
158   	 0027	 90750002		i0 = i7 - (0x2)			# LN: 36 | 
159   	 0028	 B0140000		i0 = xmem[i0]			# LN: 36 | 
160   	 0029	 00007FFF		nop #empty cycle
161   	 002A	 80050010		i0 = i0 + (0x10)			# LN: 36 | 
162   	 002B	 B0440000		xmem[_p_R_channel_out + 0] = i0			# LN: 36 | 
163   	 002C				cline_36_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
164   	 002C	 90750002		i0 = i7 - (0x2)			# LN: 37 | 
165   	 002D	 B0140000		i0 = xmem[i0]			# LN: 37 | 
166   	 002E	 00007FFF		nop #empty cycle
167   	 002F	 80050040		i0 = i0 + (0x40)			# LN: 37 | 
168   	 0030	 B0440000		xmem[_p_LS_channel_out + 0] = i0			# LN: 37 | 
169   	 0031				cline_37_0:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
170   	 0031	 90750002		i0 = i7 - (0x2)			# LN: 38 | 
171   	 0032	 B0140000		i0 = xmem[i0]			# LN: 38 | 
172   	 0033	 00007FFF		nop #empty cycle
173   	 0034	 80050050		i0 = i0 + (0x50)			# LN: 38 | 
174   	 0035	 B0440000		xmem[_p_RS_channel_out + 0] = i0			# LN: 38 | 
175   	 0036				cline_38_0:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
176   	 0036	 90750002		i0 = i7 - (0x2)			# LN: 39 | 
177   	 0037	 B0140000		i0 = xmem[i0]			# LN: 39 | 
178   	 0038	 00007FFF		nop #empty cycle
179   	 0039	 80050020		i0 = i0 + (0x20)			# LN: 39 | 
180   	 003A	 B0440000		xmem[_p_C_channel_out + 0] = i0			# LN: 39 | 
181   	 003B				cline_39_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
182   	 003B	 90750002		i0 = i7 - (0x2)			# LN: 40 | 
183   	 003C	 B0140000		i0 = xmem[i0]			# LN: 40 | 
184   	 003D	 00007FFF		nop #empty cycle
185   	 003E	 80050030		i0 = i0 + (0x30)			# LN: 40 | 
186   	 003F	 B0440000		xmem[_p_LFE_channel_out + 0] = i0			# LN: 40 | 
187   	 0040				cline_40_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
188   	 0040	 90750005		i0 = i7 - (0x5)			# LN: 42 | 
189   	 0041	 00004DC0		a0 = 0			# LN: 42 | 
190   	 0042	 98540000		xmem[i0] = a0h			# LN: 42 | 
191   	 0043	 81000100		do (0x10), label_end_92			# LN: 42 | 
192   	 0044				cline_42_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
193   	 0044				label_begin_92:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
194   	 0044	 B0040000		i0 = xmem[_p_L_channel_in + 0]			# LN: 45 | 
195   	 0045	 80040000		x0 = xmem[_gain + 0]			# LN: 45 | 
196   	 0046	 81140000		x1 = xmem[i0]			# LN: 45 | 
197   	 0047	 A0050000		i0 = (0) + (_p_L_channel_out)			# LN: 45 | 
198   	 0048	 B0140000		i0 = xmem[i0]			# LN: 45 | 
199   	 0049	 00002020		a0 = x1 * x0			# LN: 45 | 
200   	 004A	 88540000		xmem[i0] = a0			# LN: 45 | 
201   	 004B	 B0040000		i0 = xmem[_p_L_channel_in + 0]			# LN: 45 | 
202   	 004C	 00007FFF		nop #empty cycle
203   	 004D	 02087FFF		i0 += 1			# LN: 45 | 
204   	 004E	 B0440000		xmem[_p_L_channel_in + 0] = i0			# LN: 45 | 
205   	 004F				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
206   	 004F	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 46 | 
207   	 0050	 B1040000		i1 = xmem[_p_LS_channel_out + 0]			# LN: 46 | 
208   	 0051	 88140000		a0 = xmem[i0]			# LN: 46 | 
209   	 0052	 00004C80		a0 =- a0			# LN: 46 | 
210   	 0053	 98540001		xmem[i1] = a0h			# LN: 46 | 
211   	 0054	 B0040000		i0 = xmem[_p_LS_channel_out + 0]			# LN: 46 | 
212   	 0055	 00007FFF		nop #empty cycle
213   	 0056	 02087FFF		i0 += 1			# LN: 46 | 
214   	 0057	 B0440000		xmem[_p_LS_channel_out + 0] = i0			# LN: 46 | 
215   	 0058				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
216   	 0058	 B0040000		i0 = xmem[_p_R_channel_in + 0]			# LN: 47 | 
217   	 0059	 80040000		x0 = xmem[_gain + 0]			# LN: 47 | 
218   	 005A	 81140000		x1 = xmem[i0]			# LN: 47 | 
219   	 005B	 A0050000		i0 = (0) + (_p_R_channel_out)			# LN: 47 | 
220   	 005C	 B0140000		i0 = xmem[i0]			# LN: 47 | 
221   	 005D	 00002020		a0 = x1 * x0			# LN: 47 | 
222   	 005E	 88540000		xmem[i0] = a0			# LN: 47 | 
223   	 005F	 B0040000		i0 = xmem[_p_R_channel_in + 0]			# LN: 47 | 
224   	 0060	 00007FFF		nop #empty cycle
225   	 0061	 02087FFF		i0 += 1			# LN: 47 | 
226   	 0062	 B0440000		xmem[_p_R_channel_in + 0] = i0			# LN: 47 | 
227   	 0063				cline_47_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
228   	 0063	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 48 | 
229   	 0064	 B1040000		i1 = xmem[_p_RS_channel_out + 0]			# LN: 48 | 
230   	 0065	 88140000		a0 = xmem[i0]			# LN: 48 | 
231   	 0066	 00004C80		a0 =- a0			# LN: 48 | 
232   	 0067	 98540001		xmem[i1] = a0h			# LN: 48 | 
233   	 0068	 B0040000		i0 = xmem[_p_RS_channel_out + 0]			# LN: 48 | 
234   	 0069	 00007FFF		nop #empty cycle
235   	 006A	 02087FFF		i0 += 1			# LN: 48 | 
236   	 006B	 B0440000		xmem[_p_RS_channel_out + 0] = i0			# LN: 48 | 
237   	 006C				cline_48_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
238   	 006C	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 51 | 
239   	 006D	 80040000		x0 = xmem[__extractedConst_0_2 + 0]			# LN: 51 | 
240   	 006E	 81140000		x1 = xmem[i0]			# LN: 51 | 
241   	 006F	 00002020		a0 = x1 * x0			# LN: 51 | 
242   	 0070	 88440000		xmem[_input_L_with_stage_two_gain + 0] = a0			# LN: 51 | 
243   	 0071	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 51 | 
244   	 0072	 00007FFF		nop #empty cycle
245   	 0073	 02087FFF		i0 += 1			# LN: 51 | 
246   	 0074	 B0440000		xmem[_p_L_channel_out + 0] = i0			# LN: 51 | 
247   	 0075				cline_51_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
248   	 0075	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 52 | 
249   	 0076	 80040000		x0 = xmem[__extractedConst_0_2 + 0]			# LN: 52 | 
250   	 0077	 81140000		x1 = xmem[i0]			# LN: 52 | 
251   	 0078	 00002020		a0 = x1 * x0			# LN: 52 | 
252   	 0079	 88440000		xmem[_input_R_with_stage_two_gain + 0] = a0			# LN: 52 | 
253   	 007A	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 52 | 
254   	 007B	 00007FFF		nop #empty cycle
255   	 007C	 02087FFF		i0 += 1			# LN: 52 | 
256   	 007D	 B0440000		xmem[_p_R_channel_out + 0] = i0			# LN: 52 | 
257   	 007E				cline_52_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
258   	 007E	 88040000		a0 = xmem[_mode + 0]			# LN: 55 | 
259   	 007F	 894A0002		uhalfword(a1) = (0x2)			# LN: 55 | 
260   	 0080	 00004F08		a0 - a1			# LN: 55 | 
261   	 0081	 84080086		if (a == 0) jmp (cline_55_0)			# LN: 55 | 
262   	 0082	 88040000		a0 = xmem[_mode + 0]			# LN: 55 | 
263   	 0083	 894A0003		uhalfword(a1) = (0x3)			# LN: 55 | 
264   	 0084	 00004F08		a0 - a1			# LN: 55 | 
265   	 0085	 84480090		if (a != 0) jmp (else_0)			# LN: 55 | 
266   	 0086				cline_55_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
267   	 0086	 B0040000		i0 = xmem[_p_C_channel_out + 0]			# LN: 58 | 
268   	 0087	 88040000		a0 = xmem[_input_L_with_stage_two_gain + 0]			# LN: 58 | 
269   	 0088	 89040000		a1 = xmem[_input_R_with_stage_two_gain + 0]			# LN: 58 | 
270   	 0089	 00004408		a0 = a0 + a1			# LN: 58 | 
271   	 008A	 98540000		xmem[i0] = a0h			# LN: 58 | 
272   	 008B	 B0040000		i0 = xmem[_p_C_channel_out + 0]			# LN: 58 | 
273   	 008C	 00007FFF		nop #empty cycle
274   	 008D	 02087FFF		i0 += 1			# LN: 58 | 
275   	 008E	 B0440000		xmem[_p_C_channel_out + 0] = i0			# LN: 58 | 
276   	 008F	 80080090		jmp (endif_0)			# LN: 58 | 
277   	 0090				cline_58_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
278   	 0090				endif_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
279   	 0090				else_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
280   	 0090	 88040000		a0 = xmem[_mode + 0]			# LN: 62 | 
281   	 0091	 894A0001		uhalfword(a1) = (0x1)			# LN: 62 | 
282   	 0092	 00004F08		a0 - a1			# LN: 62 | 
283   	 0093	 84080098		if (a == 0) jmp (cline_62_0)			# LN: 62 | 
284   	 0094	 88040000		a0 = xmem[_mode + 0]			# LN: 62 | 
285   	 0095	 894A0003		uhalfword(a1) = (0x3)			# LN: 62 | 
286   	 0096	 00004F08		a0 - a1			# LN: 62 | 
287   	 0097	 844800FB		if (a != 0) jmp (else_1)			# LN: 62 | 
288   	 0098				cline_62_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
289   	 0098	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 64 | 
290   	 0099	 B0140000		i0 = xmem[i0]			# LN: 64 | 
291   	 009A	 88040000		a0 = xmem[_input_R_with_stage_two_gain + 0]			# LN: 64 | 
292   	 009B	 98540000		xmem[i0] = a0h			# LN: 64 | 
293   	 009C				cline_64_0:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
294   	 009C	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 67 | 
295   	 009D	 88040000		a0 = xmem[_distorsion_threshold_1 + 0]			# LN: 67 | 
296   	 009E	 89140000		a1 = xmem[i0]			# LN: 67 | 
297   	 009F	 00004F01		a1 - a0			# LN: 67 | 
298   	 00A0	 850800C2		if (a <= 0) jmp (else_2)			# LN: 67 | 
299   	 00A1				cline_67_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
300   	 00A1	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 69 | 
301   	 00A2	 88040000		a0 = xmem[_distorsion_threshold_2 + 0]			# LN: 69 | 
302   	 00A3	 89140000		a1 = xmem[i0]			# LN: 69 | 
303   	 00A4	 00004F01		a1 - a0			# LN: 69 | 
304   	 00A5	 850800AB		if (a <= 0) jmp (else_3)			# LN: 69 | 
305   	 00A6				cline_69_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
306   	 00A6	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 71 | 
307   	 00A7	 B0140000		i0 = xmem[i0]			# LN: 71 | 
308   	 00A8	 88040000		a0 = xmem[__extractedConst_1_1 + 0]			# LN: 71 | 
309   	 00A9	 98540000		xmem[i0] = a0h			# LN: 71 | 
310   	 00AA	 800800C1		jmp (endif_3)			# LN: 71 | 
311   	 00AB				cline_71_0:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
312   	 00AB				else_3:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
313   	 00AB	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 76 | 
314   	 00AC	 88040000		a0 = xmem[__extractedConst_2_1 + 0]			# LN: 76 | 
315   	 00AD	 19404C24		a1 = xmem[i0]; b0 =+ a0			# LN: 76, 76 | 
316   	 00AE	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 76 | 
317   	 00AF	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 76 | 
318   	 00B0	 1040442C		x0 = xmem[i0]; b0 = b0 + a1			# LN: 76, 76 | 
319   	 00B1	 81140001		x1 = xmem[i1]			# LN: 76 | 
320   	 00B2	 887A6000		a0 = (0x6000)			# LN: 76 | 
321   	 00B3	 00002081		a1 = x0 * x1			# LN: 76 | 
322   	 00B4	 80880000		call (__mul_sat_laccum)			# LN: 76 | 
323   	 00B5	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 76 | 
324   	 00B6	 B0140000		i0 = xmem[i0]			# LN: 76 | 
325   	 00B7	 00004460		a0 = a0 - b0			# LN: 76 | 
326   	 00B8	 00004C80		a0 =- a0			# LN: 76 | 
327   	 00B9	 88540000		xmem[i0] = a0			# LN: 76 | 
328   	 00BA				cline_76_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
329   	 00BA	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 77 | 
330   	 00BB	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 77 | 
331   	 00BC	 88140000		a0 = xmem[i0]			# LN: 77 | 
332   	 00BD	 00004E00		a0 = a0 << 1			# LN: 77 | 
333   	 00BE	 B0140001		i0 = xmem[i1]			# LN: 77 | 
334   	 00BF	 00004E00		a0 = a0 << 1			# LN: 77 | 
335   	 00C0	 98540000		xmem[i0] = a0h			# LN: 77 | 
336   	 00C1				cline_77_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
337   	 00C1				endif_3:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
338   	 00C1	 800800F1		jmp (endif_2)			# LN: 69 | 
339   	 00C2				cline_69_1:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
340   	 00C2				else_2:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
341   	 00C2	 88040000		a0 = xmem[_distorsion_threshold_1 + 0]			# LN: 82 | 
342   	 00C3	 00004C80		a0 =- a0			# LN: 82 | 
343   	 00C4	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 82 | 
344   	 00C5	 00007FFF		nop #empty cycle
345   	 00C6	 89140000		a1 = xmem[i0]			# LN: 82 | 
346   	 00C7	 00004F01		a1 - a0			# LN: 82 | 
347   	 00C8	 84C800EB		if (a >= 0) jmp (else_4)			# LN: 82 | 
348   	 00C9				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
349   	 00C9	 88040000		a0 = xmem[_distorsion_threshold_2 + 0]			# LN: 84 | 
350   	 00CA	 00004C80		a0 =- a0			# LN: 84 | 
351   	 00CB	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 84 | 
352   	 00CC	 00007FFF		nop #empty cycle
353   	 00CD	 89140000		a1 = xmem[i0]			# LN: 84 | 
354   	 00CE	 00004F01		a1 - a0			# LN: 84 | 
355   	 00CF	 84C800D5		if (a >= 0) jmp (else_5)			# LN: 84 | 
356   	 00D0				cline_84_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
357   	 00D0	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 86 | 
358   	 00D1	 B0140000		i0 = xmem[i0]			# LN: 86 | 
359   	 00D2	 887A8000		a0 = (0x8000)			# LN: 86 | 
360   	 00D3	 98540000		xmem[i0] = a0h			# LN: 86 | 
361   	 00D4	 800800EA		jmp (endif_5)			# LN: 86 | 
362   	 00D5				cline_86_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
363   	 00D5				else_5:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
364   	 00D5	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 91 | 
365   	 00D6	 88040000		a0 = xmem[__extractedConst_3_1 + 0]			# LN: 91 | 
366   	 00D7	 19404C24		a1 = xmem[i0]; b0 =+ a0			# LN: 91, 91 | 
367   	 00D8	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 91 | 
368   	 00D9	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 91 | 
369   	 00DA	 1040442C		x0 = xmem[i0]; b0 = b0 + a1			# LN: 91, 91 | 
370   	 00DB	 81140001		x1 = xmem[i1]			# LN: 91 | 
371   	 00DC	 887A6000		a0 = (0x6000)			# LN: 91 | 
372   	 00DD	 00002081		a1 = x0 * x1			# LN: 91 | 
373   	 00DE	 80880000		call (__mul_sat_laccum)			# LN: 91 | 
374   	 00DF	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 91 | 
375   	 00E0	 B0140000		i0 = xmem[i0]			# LN: 91 | 
376   	 00E1	 00004420		a0 = a0 + b0			# LN: 91 | 
377   	 00E2	 88540000		xmem[i0] = a0			# LN: 91 | 
378   	 00E3				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
379   	 00E3	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 92 | 
380   	 00E4	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 92 | 
381   	 00E5	 88140000		a0 = xmem[i0]			# LN: 92 | 
382   	 00E6	 00004E00		a0 = a0 << 1			# LN: 92 | 
383   	 00E7	 B0140001		i0 = xmem[i1]			# LN: 92 | 
384   	 00E8	 00004E00		a0 = a0 << 1			# LN: 92 | 
385   	 00E9	 98540000		xmem[i0] = a0h			# LN: 92 | 
386   	 00EA				cline_92_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
387   	 00EA				endif_5:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
388   	 00EA	 800800F1		jmp (endif_4)			# LN: 84 | 
389   	 00EB				cline_84_1:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
390   	 00EB				else_4:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
391   	 00EB	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 98 | 
392   	 00EC	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 98 | 
393   	 00ED	 88140000		a0 = xmem[i0]			# LN: 98 | 
394   	 00EE	 B0140001		i0 = xmem[i1]			# LN: 98 | 
395   	 00EF	 00004E00		a0 = a0 << 1			# LN: 98 | 
396   	 00F0	 98540000		xmem[i0] = a0h			# LN: 98 | 
397   	 00F1				cline_98_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
398   	 00F1				endif_2:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
399   	 00F1				endif_4:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
400   	 00F1	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 102 | 
401   	 00F2	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 102 | 
402   	 00F3	 88140000		a0 = xmem[i0]			# LN: 102 | 
403   	 00F4	 00004E40		a0 = a0 >> 1			# LN: 102 | 
404   	 00F5	 98540001		xmem[i1] = a0h			# LN: 102 | 
405   	 00F6	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 102 | 
406   	 00F7	 00007FFF		nop #empty cycle
407   	 00F8	 02087FFF		i0 += 1			# LN: 102 | 
408   	 00F9	 B0440000		xmem[_p_LFE_channel_out + 0] = i0			# LN: 102 | 
409   	 00FA	 800800FB		jmp (endif_1)			# LN: 102 | 
410   	 00FB				cline_102_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
411   	 00FB				init_latch_label_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
412   	 00FB				endif_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
413   	 00FB				else_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
414   	 00FB	 90750005		i0 = i7 - (0x5)			# LN: 42 | 
415   	 00FC	 88140000		a0 = xmem[i0]			# LN: 42 | 
416   	 00FD	 894A0001		uhalfword(a1) = (0x1)			# LN: 42 | 
417   	 00FE	 00004408		a0 = a0 + a1			# LN: 42 | 
418   	 00FF	 90750005		i0 = i7 - (0x5)			# LN: 42 | 
419   	 0100				label_end_92:			# LN: 42 | CYCLE: 5 | RULES: ()
420   	 0100	 98540000		xmem[i0] = a0h			# LN: 42 | 
421   	 0101				cline_42_1:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
422   	 0101				for_end_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
423   	 0101	 80880000		call (_cl_get_cycle_count)			# LN: 106 | 
424   	 0102	 90750007		i0 = i7 - (0x7)			# LN: 106 | 
425   	 0103	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 106, 106 | 
426   	 0104	 90540000		xmem[i0] = a0l			# LN: 106 | 
427   	 0105				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
428   	 0105	 90750007		i0 = i7 - (0x7)			# LN: 107 | 
429   	 0106	 88140010		a0 = xmem[i0]; i0 += 1			# LN: 107, 107 | 
430   	 0107	 90140000		a0l = xmem[i0]			# LN: 107 | 
431   	 0108	 90750004		i0 = i7 - (0x4)			# LN: 107 | 
432   	 0109	 89140010		a1 = xmem[i0]; i0 += 1			# LN: 107, 107 | 
433   	 010A	 91140000		a1l = xmem[i0]			# LN: 107 | 
434   	 010B	 00004448		a0 = a0 - a1			# LN: 107 | 
435   	 010C	 90750009		i0 = i7 - (0x9)			# LN: 107 | 
436   	 010D	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 107, 107 | 
437   	 010E	 90540000		xmem[i0] = a0l			# LN: 107 | 
438   	 010F				cline_107_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
439   	 010F	 91750009		i1 = i7 - (0x9)			# LN: 108 | 
440   	 0110	 88140011		a0 = xmem[i1]; i1 += 1			# LN: 108, 108 | 
441   	 0111	 90140001		a0l = xmem[i1]			# LN: 108 | 
442   	 0112	 A0050000		i0 = (0) + (_string_const_0)			# LN: 108 | 
443   	 0113	 80880000		call (_printf)			# LN: 108 | 
444   	 0114				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
445   	 0114	 80080115		jmp (__epilogue_252)			# LN: 109 | 
446   	 0115				__epilogue_252:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
447   	 0115	 97750009		i7 = i7 - (0x9)			# LN: 109 | 
448   	 0116	 02177FFF		i7 -= 1			# LN: 109 | 
449   	 0117	 81880000		ret			# LN: 109 | 
450   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__epilogue_250                                                                  			         Relocatable         processing_GEN_0019:000EH
__epilogue_252                                                                  			         Relocatable         processing_GEN_0019:0115H
__extractedConst_0_2                                                            			         Relocatable         processing_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         processing_GEN_0001:0000H
__extractedConst_2_1                                                            			         Relocatable         processing_GEN_0002:0000H
__extractedConst_3_1                                                            			         Relocatable         processing_GEN_0003:0000H
__mul_sat_laccum                                                                					 External   
_cl_get_cycle_count                                                             					 External   
_distorsion_threshold_1                                                         			         Relocatable         processing_GEN_0004:0000H
_distorsion_threshold_2                                                         			         Relocatable         processing_GEN_0005:0000H
_gain                                                                           			         Relocatable         processing_GEN_0006:0000H
_initialize_processing                                                          			  Public Relocatable       processing_GEN_0019:0000H
_input_L_with_stage_two_gain                                                    			  Public Relocatable       processing_GEN_0007:0000H
_input_R_with_stage_two_gain                                                    			  Public Relocatable       processing_GEN_0008:0000H
_mode                                                                           			         Relocatable         processing_GEN_0009:0000H
_p_C_channel_out                                                                			  Public Relocatable       processing_GEN_0010:0000H
_p_LFE_channel_out                                                              			  Public Relocatable       processing_GEN_0011:0000H
_p_LS_channel_out                                                               			  Public Relocatable       processing_GEN_0012:0000H
_p_L_channel_in                                                                 			  Public Relocatable       processing_GEN_0013:0000H
_p_L_channel_out                                                                			  Public Relocatable       processing_GEN_0014:0000H
_p_RS_channel_out                                                               			  Public Relocatable       processing_GEN_0015:0000H
_p_R_channel_in                                                                 			  Public Relocatable       processing_GEN_0016:0000H
_p_R_channel_out                                                                			  Public Relocatable       processing_GEN_0017:0000H
_printf                                                                         					 External   
_processing                                                                     			  Public Relocatable       processing_GEN_0019:0011H
_string_const_0                                                                 			         Relocatable         processing_GEN_0018:0000H
cline_102_0                                                                     			  Unused Relocatable        processing_GEN_0019:00FBH
cline_106_0                                                                     			  Unused Relocatable        processing_GEN_0019:0105H
cline_107_0                                                                     			  Unused Relocatable        processing_GEN_0019:010FH
cline_108_0                                                                     			  Unused Relocatable        processing_GEN_0019:0114H
cline_20_0                                                                      			  Unused Relocatable        processing_GEN_0019:0007H
cline_21_0                                                                      			  Unused Relocatable        processing_GEN_0019:000AH
cline_22_0                                                                      			  Unused Relocatable        processing_GEN_0019:000DH
cline_26_0                                                                      			  Unused Relocatable        processing_GEN_0019:0018H
cline_30_0                                                                      			  Unused Relocatable        processing_GEN_0019:001CH
cline_32_0                                                                      			  Unused Relocatable        processing_GEN_0019:001FH
cline_33_0                                                                      			  Unused Relocatable        processing_GEN_0019:0024H
cline_35_0                                                                      			  Unused Relocatable        processing_GEN_0019:0027H
cline_36_0                                                                      			  Unused Relocatable        processing_GEN_0019:002CH
cline_37_0                                                                      			  Unused Relocatable        processing_GEN_0019:0031H
cline_38_0                                                                      			  Unused Relocatable        processing_GEN_0019:0036H
cline_39_0                                                                      			  Unused Relocatable        processing_GEN_0019:003BH
cline_40_0                                                                      			  Unused Relocatable        processing_GEN_0019:0040H
cline_42_0                                                                      			  Unused Relocatable        processing_GEN_0019:0044H
cline_42_1                                                                      			  Unused Relocatable        processing_GEN_0019:0101H
cline_45_0                                                                      			  Unused Relocatable        processing_GEN_0019:004FH
cline_46_0                                                                      			  Unused Relocatable        processing_GEN_0019:0058H
cline_47_0                                                                      			  Unused Relocatable        processing_GEN_0019:0063H
cline_48_0                                                                      			  Unused Relocatable        processing_GEN_0019:006CH
cline_51_0                                                                      			  Unused Relocatable        processing_GEN_0019:0075H
cline_52_0                                                                      			  Unused Relocatable        processing_GEN_0019:007EH
cline_55_0                                                                      			         Relocatable         processing_GEN_0019:0086H
cline_58_0                                                                      			  Unused Relocatable        processing_GEN_0019:0090H
cline_62_0                                                                      			         Relocatable         processing_GEN_0019:0098H
cline_64_0                                                                      			  Unused Relocatable        processing_GEN_0019:009CH
cline_67_0                                                                      			  Unused Relocatable        processing_GEN_0019:00A1H
cline_69_0                                                                      			  Unused Relocatable        processing_GEN_0019:00A6H
cline_69_1                                                                      			  Unused Relocatable        processing_GEN_0019:00C2H
cline_71_0                                                                      			  Unused Relocatable        processing_GEN_0019:00ABH
cline_76_0                                                                      			  Unused Relocatable        processing_GEN_0019:00BAH
cline_77_0                                                                      			  Unused Relocatable        processing_GEN_0019:00C1H
cline_82_0                                                                      			  Unused Relocatable        processing_GEN_0019:00C9H
cline_84_0                                                                      			  Unused Relocatable        processing_GEN_0019:00D0H
cline_84_1                                                                      			  Unused Relocatable        processing_GEN_0019:00EBH
cline_86_0                                                                      			  Unused Relocatable        processing_GEN_0019:00D5H
cline_91_0                                                                      			  Unused Relocatable        processing_GEN_0019:00E3H
cline_92_0                                                                      			  Unused Relocatable        processing_GEN_0019:00EAH
cline_98_0                                                                      			  Unused Relocatable        processing_GEN_0019:00F1H
else_0                                                                          			         Relocatable         processing_GEN_0019:0090H
else_1                                                                          			         Relocatable         processing_GEN_0019:00FBH
else_2                                                                          			         Relocatable         processing_GEN_0019:00C2H
else_3                                                                          			         Relocatable         processing_GEN_0019:00ABH
else_4                                                                          			         Relocatable         processing_GEN_0019:00EBH
else_5                                                                          			         Relocatable         processing_GEN_0019:00D5H
endif_0                                                                         			         Relocatable         processing_GEN_0019:0090H
endif_1                                                                         			         Relocatable         processing_GEN_0019:00FBH
endif_2                                                                         			         Relocatable         processing_GEN_0019:00F1H
endif_3                                                                         			         Relocatable         processing_GEN_0019:00C1H
endif_4                                                                         			         Relocatable         processing_GEN_0019:00F1H
endif_5                                                                         			         Relocatable         processing_GEN_0019:00EAH
for_end_0                                                                       			  Unused Relocatable        processing_GEN_0019:0101H
init_latch_label_0                                                              			  Unused Relocatable        processing_GEN_0019:00FBH
label_begin_92                                                                  			  Unused Relocatable        processing_GEN_0019:0044H
label_end_92                                                                    			         Relocatable         processing_GEN_0019:0100H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 processing_GEN_0000                     			 X_OVLY                                  
0001H	 processing_GEN_0001                     			 X_OVLY                                  
0001H	 processing_GEN_0002                     			 X_OVLY                                  
0001H	 processing_GEN_0003                     			 X_OVLY                                  
0001H	 processing_GEN_0004                     			 X_OVLY                                  
0001H	 processing_GEN_0005                     			 X_OVLY                                  
0001H	 processing_GEN_0006                     			 X_OVLY                                  
0001H	 processing_GEN_0007                     			 X_OVLY                                  
0001H	 processing_GEN_0008                     			 X_OVLY                                  
0001H	 processing_GEN_0009                     			 X_OVLY                                  
0001H	 processing_GEN_0010                     			 X_OVLY                                  
0001H	 processing_GEN_0011                     			 X_OVLY                                  
0001H	 processing_GEN_0012                     			 X_OVLY                                  
0001H	 processing_GEN_0013                     			 X_OVLY                                  
0001H	 processing_GEN_0014                     			 X_OVLY                                  
0001H	 processing_GEN_0015                     			 X_OVLY                                  
0001H	 processing_GEN_0016                     			 X_OVLY                                  
0001H	 processing_GEN_0017                     			 X_OVLY                                  
001AH	 processing_GEN_0018                     			 X_OVLY                                  
0118H	 processing_GEN_0019                     			 CODE_OVLY                               
