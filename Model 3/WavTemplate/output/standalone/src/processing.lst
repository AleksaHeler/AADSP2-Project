1     	 0000					.public _input_L_with_stage_two_gain
2     	 0000					.public _input_R_with_stage_two_gain
3     	 0000					.public _p_C_channel_out
4     	 0000					.public _p_LFE_channel_out
5     	 0000					.public _p_LS_channel_out
6     	 0000					.public _p_L_channel_in
7     	 0000					.public _p_L_channel_out
8     	 0000					.public _p_RS_channel_out
9     	 0000					.public _p_R_channel_in
10    	 0000					.public _p_R_channel_out
11    	 0000					.public _initialize_processing
12    	 0000					.public _processing
13    	 0000					.extern __mul_sat_laccum
14    							.xdata_ovly
14     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
15    	 0000				__extractedConst_0_2
16    	 0000					.dw  (0x65ac8c2f)
	 0000	 65AC8C2F	 
17    							.xdata_ovly
17     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
18    	 0000				__extractedConst_1_1
19    	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
20    							.xdata_ovly
20     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
21    	 0000				__extractedConst_2_1
22    	 0000					.dw  (0xf555555c)
	 0000	 F555555C	 
23    							.xdata_ovly
23     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
24    	 0000				__extractedConst_3_1
25    	 0000					.dw  (0xaaaaaa4)
	 0000	 0AAAAAA4	 
26    							.xdata_ovly
26     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
27    	 0000				_distorsion_threshold_1
28    	 0000					.dw  (0x6666666)
	 0000	 06666666	 
29    							.xdata_ovly
29     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
30    	 0000				_distorsion_threshold_2
31    	 0000					.dw  (0xccccccd)
	 0000	 0CCCCCCD	 
32    							.xdata_ovly
32     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
33    	 0000				_gain
34    	 0000					.bss (0x1)
35    							.xdata_ovly
35     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
36    	 0000				_input_L_with_stage_two_gain
37    	 0000					.dw  (0x0)
	 0000	 00000000	 
38    							.xdata_ovly
38     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
39    	 0000				_input_R_with_stage_two_gain
40    	 0000					.dw  (0x0)
	 0000	 00000000	 
41    							.xdata_ovly
41     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
42    	 0000				_mode
43    	 0000					.bss (0x1)
44    							.xdata_ovly
44     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
45    	 0000				_p_C_channel_out
46    	 0000					.bss (0x1)
47    							.xdata_ovly
47     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
48    	 0000				_p_LFE_channel_out
49    	 0000					.bss (0x1)
50    							.xdata_ovly
50     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
51    	 0000				_p_LS_channel_out
52    	 0000					.bss (0x1)
53    							.xdata_ovly
53     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
54    	 0000				_p_L_channel_in
55    	 0000					.bss (0x1)
56    							.xdata_ovly
56     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
57    	 0000				_p_L_channel_out
58    	 0000					.bss (0x1)
59    							.xdata_ovly
59     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
60    	 0000				_p_RS_channel_out
61    	 0000					.bss (0x1)
62    							.xdata_ovly
62     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
63    	 0000				_p_R_channel_in
64    	 0000					.bss (0x1)
65    							.xdata_ovly
65     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
66    	 0000				_p_R_channel_out
67    	 0000					.bss (0x1)
68    							.code_ovly
68     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
69    						
70    						
71    						
72    	 0000				_initialize_processing:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
73    	 0000	 BB540007		xmem[i7] = i7			# LN: 20 | 
74    	 0001	 020F7FFF		i7 += 1			# LN: 20 | 
75    	 0002	 87750002		i7 = i7 + (0x2)			# LN: 20 | 
76    	 0003	 90750001		i0 = i7 - (0x1)			# LN: 20 | 
77    	 0004	 98540000		xmem[i0] = a0h			# LN: 20 | 
78    	 0005	 90750002		i0 = i7 - (0x2)			# LN: 20 | 
79    	 0006	 99540000		xmem[i0] = a1h			# LN: 20 | 
80    	 0007				cline_20_0:			/* LN: 21 | CYCLE: 0 | RULES: () */ 
81    	 0007	 90750001		i0 = i7 - (0x1)			# LN: 21 | 
82    	 0008	 88140000		a0 = xmem[i0]			# LN: 21 | 
83    	 0009	 98440000		xmem[_gain + 0] = a0h			# LN: 21 | 
84    	 000A				cline_21_0:			/* LN: 22 | CYCLE: 0 | RULES: () */ 
85    	 000A	 90750002		i0 = i7 - (0x2)			# LN: 22 | 
86    	 000B	 88140000		a0 = xmem[i0]			# LN: 22 | 
87    	 000C	 98440000		xmem[_mode + 0] = a0h			# LN: 22 | 
88    	 000D				cline_22_0:			/* LN: 23 | CYCLE: 0 | RULES: () */ 
89    	 000D	 8008000E		jmp (__epilogue_236)			# LN: 23 | 
90    	 000E				__epilogue_236:			/* LN: 23 | CYCLE: 0 | RULES: () */ 
91    	 000E	 97750002		i7 = i7 - (0x2)			# LN: 23 | 
92    	 000F	 02177FFF		i7 -= 1			# LN: 23 | 
93    	 0010	 81880000		ret			# LN: 23 | 
94    						
95    						
96    						
97    	 0011				_processing:			/* LN: 26 | CYCLE: 0 | RULES: () */ 
98    	 0011	 BB540007		xmem[i7] = i7			# LN: 26 | 
99    	 0012	 020F7FFF		i7 += 1			# LN: 26 | 
100   	 0013	 87750003		i7 = i7 + (0x3)			# LN: 26 | 
101   	 0014	 94750001		i4 = i7 - (0x1)			# LN: 26 | 
102   	 0015	 B0540004		xmem[i4] = i0			# LN: 26 | 
103   	 0016	 90750002		i0 = i7 - (0x2)			# LN: 26 | 
104   	 0017	 B1540000		xmem[i0] = i1			# LN: 26 | 
105   	 0018				cline_26_0:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
106   	 0018	 90750001		i0 = i7 - (0x1)			# LN: 29 | 
107   	 0019	 B0140000		i0 = xmem[i0]			# LN: 29 | 
108   	 001A	 B0440000		xmem[_p_L_channel_in + 0] = i0			# LN: 29 | 
109   	 001B				cline_29_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
110   	 001B	 90750001		i0 = i7 - (0x1)			# LN: 30 | 
111   	 001C	 B0140000		i0 = xmem[i0]			# LN: 30 | 
112   	 001D	 00007FFF		nop #empty cycle
113   	 001E	 80050010		i0 = i0 + (0x10)			# LN: 30 | 
114   	 001F	 B0440000		xmem[_p_R_channel_in + 0] = i0			# LN: 30 | 
115   	 0020				cline_30_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
116   	 0020	 90750002		i0 = i7 - (0x2)			# LN: 32 | 
117   	 0021	 B0140000		i0 = xmem[i0]			# LN: 32 | 
118   	 0022	 B0440000		xmem[_p_L_channel_out + 0] = i0			# LN: 32 | 
119   	 0023				cline_32_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
120   	 0023	 90750002		i0 = i7 - (0x2)			# LN: 33 | 
121   	 0024	 B0140000		i0 = xmem[i0]			# LN: 33 | 
122   	 0025	 00007FFF		nop #empty cycle
123   	 0026	 80050010		i0 = i0 + (0x10)			# LN: 33 | 
124   	 0027	 B0440000		xmem[_p_R_channel_out + 0] = i0			# LN: 33 | 
125   	 0028				cline_33_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
126   	 0028	 90750002		i0 = i7 - (0x2)			# LN: 34 | 
127   	 0029	 B0140000		i0 = xmem[i0]			# LN: 34 | 
128   	 002A	 00007FFF		nop #empty cycle
129   	 002B	 80050040		i0 = i0 + (0x40)			# LN: 34 | 
130   	 002C	 B0440000		xmem[_p_LS_channel_out + 0] = i0			# LN: 34 | 
131   	 002D				cline_34_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
132   	 002D	 90750002		i0 = i7 - (0x2)			# LN: 35 | 
133   	 002E	 B0140000		i0 = xmem[i0]			# LN: 35 | 
134   	 002F	 00007FFF		nop #empty cycle
135   	 0030	 80050050		i0 = i0 + (0x50)			# LN: 35 | 
136   	 0031	 B0440000		xmem[_p_RS_channel_out + 0] = i0			# LN: 35 | 
137   	 0032				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
138   	 0032	 90750002		i0 = i7 - (0x2)			# LN: 36 | 
139   	 0033	 B0140000		i0 = xmem[i0]			# LN: 36 | 
140   	 0034	 00007FFF		nop #empty cycle
141   	 0035	 80050020		i0 = i0 + (0x20)			# LN: 36 | 
142   	 0036	 B0440000		xmem[_p_C_channel_out + 0] = i0			# LN: 36 | 
143   	 0037				cline_36_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
144   	 0037	 90750002		i0 = i7 - (0x2)			# LN: 37 | 
145   	 0038	 B0140000		i0 = xmem[i0]			# LN: 37 | 
146   	 0039	 00007FFF		nop #empty cycle
147   	 003A	 80050030		i0 = i0 + (0x30)			# LN: 37 | 
148   	 003B	 B0440000		xmem[_p_LFE_channel_out + 0] = i0			# LN: 37 | 
149   	 003C				cline_37_0:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
150   	 003C	 90750003		i0 = i7 - (0x3)			# LN: 39 | 
151   	 003D	 00004DC0		a0 = 0			# LN: 39 | 
152   	 003E	 98540000		xmem[i0] = a0h			# LN: 39 | 
153   	 003F	 810000FC		do (0x10), label_end_92			# LN: 39 | 
154   	 0040				cline_39_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
155   	 0040				label_begin_92:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
156   	 0040	 B0040000		i0 = xmem[_p_L_channel_in + 0]			# LN: 42 | 
157   	 0041	 80040000		x0 = xmem[_gain + 0]			# LN: 42 | 
158   	 0042	 81140000		x1 = xmem[i0]			# LN: 42 | 
159   	 0043	 A0050000		i0 = (0) + (_p_L_channel_out)			# LN: 42 | 
160   	 0044	 B0140000		i0 = xmem[i0]			# LN: 42 | 
161   	 0045	 00002020		a0 = x1 * x0			# LN: 42 | 
162   	 0046	 88540000		xmem[i0] = a0			# LN: 42 | 
163   	 0047	 B0040000		i0 = xmem[_p_L_channel_in + 0]			# LN: 42 | 
164   	 0048	 00007FFF		nop #empty cycle
165   	 0049	 02087FFF		i0 += 1			# LN: 42 | 
166   	 004A	 B0440000		xmem[_p_L_channel_in + 0] = i0			# LN: 42 | 
167   	 004B				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
168   	 004B	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 43 | 
169   	 004C	 B1040000		i1 = xmem[_p_LS_channel_out + 0]			# LN: 43 | 
170   	 004D	 88140000		a0 = xmem[i0]			# LN: 43 | 
171   	 004E	 00004C80		a0 =- a0			# LN: 43 | 
172   	 004F	 98540001		xmem[i1] = a0h			# LN: 43 | 
173   	 0050	 B0040000		i0 = xmem[_p_LS_channel_out + 0]			# LN: 43 | 
174   	 0051	 00007FFF		nop #empty cycle
175   	 0052	 02087FFF		i0 += 1			# LN: 43 | 
176   	 0053	 B0440000		xmem[_p_LS_channel_out + 0] = i0			# LN: 43 | 
177   	 0054				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
178   	 0054	 B0040000		i0 = xmem[_p_R_channel_in + 0]			# LN: 44 | 
179   	 0055	 80040000		x0 = xmem[_gain + 0]			# LN: 44 | 
180   	 0056	 81140000		x1 = xmem[i0]			# LN: 44 | 
181   	 0057	 A0050000		i0 = (0) + (_p_R_channel_out)			# LN: 44 | 
182   	 0058	 B0140000		i0 = xmem[i0]			# LN: 44 | 
183   	 0059	 00002020		a0 = x1 * x0			# LN: 44 | 
184   	 005A	 88540000		xmem[i0] = a0			# LN: 44 | 
185   	 005B	 B0040000		i0 = xmem[_p_R_channel_in + 0]			# LN: 44 | 
186   	 005C	 00007FFF		nop #empty cycle
187   	 005D	 02087FFF		i0 += 1			# LN: 44 | 
188   	 005E	 B0440000		xmem[_p_R_channel_in + 0] = i0			# LN: 44 | 
189   	 005F				cline_44_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
190   	 005F	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 45 | 
191   	 0060	 B1040000		i1 = xmem[_p_RS_channel_out + 0]			# LN: 45 | 
192   	 0061	 88140000		a0 = xmem[i0]			# LN: 45 | 
193   	 0062	 00004C80		a0 =- a0			# LN: 45 | 
194   	 0063	 98540001		xmem[i1] = a0h			# LN: 45 | 
195   	 0064	 B0040000		i0 = xmem[_p_RS_channel_out + 0]			# LN: 45 | 
196   	 0065	 00007FFF		nop #empty cycle
197   	 0066	 02087FFF		i0 += 1			# LN: 45 | 
198   	 0067	 B0440000		xmem[_p_RS_channel_out + 0] = i0			# LN: 45 | 
199   	 0068				cline_45_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
200   	 0068	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 48 | 
201   	 0069	 80040000		x0 = xmem[__extractedConst_0_2 + 0]			# LN: 48 | 
202   	 006A	 81140000		x1 = xmem[i0]			# LN: 48 | 
203   	 006B	 00002020		a0 = x1 * x0			# LN: 48 | 
204   	 006C	 88440000		xmem[_input_L_with_stage_two_gain + 0] = a0			# LN: 48 | 
205   	 006D	 B0040000		i0 = xmem[_p_L_channel_out + 0]			# LN: 48 | 
206   	 006E	 00007FFF		nop #empty cycle
207   	 006F	 02087FFF		i0 += 1			# LN: 48 | 
208   	 0070	 B0440000		xmem[_p_L_channel_out + 0] = i0			# LN: 48 | 
209   	 0071				cline_48_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
210   	 0071	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 49 | 
211   	 0072	 80040000		x0 = xmem[__extractedConst_0_2 + 0]			# LN: 49 | 
212   	 0073	 81140000		x1 = xmem[i0]			# LN: 49 | 
213   	 0074	 00002020		a0 = x1 * x0			# LN: 49 | 
214   	 0075	 88440000		xmem[_input_R_with_stage_two_gain + 0] = a0			# LN: 49 | 
215   	 0076	 B0040000		i0 = xmem[_p_R_channel_out + 0]			# LN: 49 | 
216   	 0077	 00007FFF		nop #empty cycle
217   	 0078	 02087FFF		i0 += 1			# LN: 49 | 
218   	 0079	 B0440000		xmem[_p_R_channel_out + 0] = i0			# LN: 49 | 
219   	 007A				cline_49_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
220   	 007A	 88040000		a0 = xmem[_mode + 0]			# LN: 52 | 
221   	 007B	 894A0002		uhalfword(a1) = (0x2)			# LN: 52 | 
222   	 007C	 00004F08		a0 - a1			# LN: 52 | 
223   	 007D	 84080082		if (a == 0) jmp (cline_52_0)			# LN: 52 | 
224   	 007E	 88040000		a0 = xmem[_mode + 0]			# LN: 52 | 
225   	 007F	 894A0003		uhalfword(a1) = (0x3)			# LN: 52 | 
226   	 0080	 00004F08		a0 - a1			# LN: 52 | 
227   	 0081	 8448008C		if (a != 0) jmp (else_0)			# LN: 52 | 
228   	 0082				cline_52_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
229   	 0082	 B0040000		i0 = xmem[_p_C_channel_out + 0]			# LN: 55 | 
230   	 0083	 88040000		a0 = xmem[_input_L_with_stage_two_gain + 0]			# LN: 55 | 
231   	 0084	 89040000		a1 = xmem[_input_R_with_stage_two_gain + 0]			# LN: 55 | 
232   	 0085	 00004408		a0 = a0 + a1			# LN: 55 | 
233   	 0086	 98540000		xmem[i0] = a0h			# LN: 55 | 
234   	 0087	 B0040000		i0 = xmem[_p_C_channel_out + 0]			# LN: 55 | 
235   	 0088	 00007FFF		nop #empty cycle
236   	 0089	 02087FFF		i0 += 1			# LN: 55 | 
237   	 008A	 B0440000		xmem[_p_C_channel_out + 0] = i0			# LN: 55 | 
238   	 008B	 8008008C		jmp (endif_0)			# LN: 55 | 
239   	 008C				cline_55_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
240   	 008C				endif_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
241   	 008C				else_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
242   	 008C	 88040000		a0 = xmem[_mode + 0]			# LN: 59 | 
243   	 008D	 894A0001		uhalfword(a1) = (0x1)			# LN: 59 | 
244   	 008E	 00004F08		a0 - a1			# LN: 59 | 
245   	 008F	 84080094		if (a == 0) jmp (cline_59_0)			# LN: 59 | 
246   	 0090	 88040000		a0 = xmem[_mode + 0]			# LN: 59 | 
247   	 0091	 894A0003		uhalfword(a1) = (0x3)			# LN: 59 | 
248   	 0092	 00004F08		a0 - a1			# LN: 59 | 
249   	 0093	 844800F7		if (a != 0) jmp (else_1)			# LN: 59 | 
250   	 0094				cline_59_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
251   	 0094	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 61 | 
252   	 0095	 B0140000		i0 = xmem[i0]			# LN: 61 | 
253   	 0096	 88040000		a0 = xmem[_input_R_with_stage_two_gain + 0]			# LN: 61 | 
254   	 0097	 98540000		xmem[i0] = a0h			# LN: 61 | 
255   	 0098				cline_61_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
256   	 0098	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 64 | 
257   	 0099	 88040000		a0 = xmem[_distorsion_threshold_1 + 0]			# LN: 64 | 
258   	 009A	 89140000		a1 = xmem[i0]			# LN: 64 | 
259   	 009B	 00004F01		a1 - a0			# LN: 64 | 
260   	 009C	 850800BE		if (a <= 0) jmp (else_2)			# LN: 64 | 
261   	 009D				cline_64_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
262   	 009D	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 66 | 
263   	 009E	 88040000		a0 = xmem[_distorsion_threshold_2 + 0]			# LN: 66 | 
264   	 009F	 89140000		a1 = xmem[i0]			# LN: 66 | 
265   	 00A0	 00004F01		a1 - a0			# LN: 66 | 
266   	 00A1	 850800A7		if (a <= 0) jmp (else_3)			# LN: 66 | 
267   	 00A2				cline_66_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
268   	 00A2	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 68 | 
269   	 00A3	 B0140000		i0 = xmem[i0]			# LN: 68 | 
270   	 00A4	 88040000		a0 = xmem[__extractedConst_1_1 + 0]			# LN: 68 | 
271   	 00A5	 98540000		xmem[i0] = a0h			# LN: 68 | 
272   	 00A6	 800800BD		jmp (endif_3)			# LN: 68 | 
273   	 00A7				cline_68_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
274   	 00A7				else_3:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
275   	 00A7	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 73 | 
276   	 00A8	 88040000		a0 = xmem[__extractedConst_2_1 + 0]			# LN: 73 | 
277   	 00A9	 19404C24		a1 = xmem[i0]; b0 =+ a0			# LN: 73, 73 | 
278   	 00AA	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 73 | 
279   	 00AB	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 73 | 
280   	 00AC	 1040442C		x0 = xmem[i0]; b0 = b0 + a1			# LN: 73, 73 | 
281   	 00AD	 81140001		x1 = xmem[i1]			# LN: 73 | 
282   	 00AE	 887A6000		a0 = (0x6000)			# LN: 73 | 
283   	 00AF	 00002081		a1 = x0 * x1			# LN: 73 | 
284   	 00B0	 80880000		call (__mul_sat_laccum)			# LN: 73 | 
285   	 00B1	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 73 | 
286   	 00B2	 B0140000		i0 = xmem[i0]			# LN: 73 | 
287   	 00B3	 00004460		a0 = a0 - b0			# LN: 73 | 
288   	 00B4	 00004C80		a0 =- a0			# LN: 73 | 
289   	 00B5	 88540000		xmem[i0] = a0			# LN: 73 | 
290   	 00B6				cline_73_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
291   	 00B6	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 74 | 
292   	 00B7	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 74 | 
293   	 00B8	 88140000		a0 = xmem[i0]			# LN: 74 | 
294   	 00B9	 00004E00		a0 = a0 << 1			# LN: 74 | 
295   	 00BA	 B0140001		i0 = xmem[i1]			# LN: 74 | 
296   	 00BB	 00004E00		a0 = a0 << 1			# LN: 74 | 
297   	 00BC	 98540000		xmem[i0] = a0h			# LN: 74 | 
298   	 00BD				cline_74_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
299   	 00BD				endif_3:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
300   	 00BD	 800800ED		jmp (endif_2)			# LN: 66 | 
301   	 00BE				cline_66_1:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
302   	 00BE				else_2:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
303   	 00BE	 88040000		a0 = xmem[_distorsion_threshold_1 + 0]			# LN: 79 | 
304   	 00BF	 00004C80		a0 =- a0			# LN: 79 | 
305   	 00C0	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 79 | 
306   	 00C1	 00007FFF		nop #empty cycle
307   	 00C2	 89140000		a1 = xmem[i0]			# LN: 79 | 
308   	 00C3	 00004F01		a1 - a0			# LN: 79 | 
309   	 00C4	 84C800E7		if (a >= 0) jmp (else_4)			# LN: 79 | 
310   	 00C5				cline_79_0:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
311   	 00C5	 88040000		a0 = xmem[_distorsion_threshold_2 + 0]			# LN: 81 | 
312   	 00C6	 00004C80		a0 =- a0			# LN: 81 | 
313   	 00C7	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 81 | 
314   	 00C8	 00007FFF		nop #empty cycle
315   	 00C9	 89140000		a1 = xmem[i0]			# LN: 81 | 
316   	 00CA	 00004F01		a1 - a0			# LN: 81 | 
317   	 00CB	 84C800D1		if (a >= 0) jmp (else_5)			# LN: 81 | 
318   	 00CC				cline_81_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
319   	 00CC	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 83 | 
320   	 00CD	 B0140000		i0 = xmem[i0]			# LN: 83 | 
321   	 00CE	 887A8000		a0 = (0x8000)			# LN: 83 | 
322   	 00CF	 98540000		xmem[i0] = a0h			# LN: 83 | 
323   	 00D0	 800800E6		jmp (endif_5)			# LN: 83 | 
324   	 00D1				cline_83_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
325   	 00D1				else_5:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
326   	 00D1	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 88 | 
327   	 00D2	 88040000		a0 = xmem[__extractedConst_3_1 + 0]			# LN: 88 | 
328   	 00D3	 19404C24		a1 = xmem[i0]; b0 =+ a0			# LN: 88, 88 | 
329   	 00D4	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 88 | 
330   	 00D5	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 88 | 
331   	 00D6	 1040442C		x0 = xmem[i0]; b0 = b0 + a1			# LN: 88, 88 | 
332   	 00D7	 81140001		x1 = xmem[i1]			# LN: 88 | 
333   	 00D8	 887A6000		a0 = (0x6000)			# LN: 88 | 
334   	 00D9	 00002081		a1 = x0 * x1			# LN: 88 | 
335   	 00DA	 80880000		call (__mul_sat_laccum)			# LN: 88 | 
336   	 00DB	 A0050000		i0 = (0) + (_p_LFE_channel_out)			# LN: 88 | 
337   	 00DC	 B0140000		i0 = xmem[i0]			# LN: 88 | 
338   	 00DD	 00004420		a0 = a0 + b0			# LN: 88 | 
339   	 00DE	 88540000		xmem[i0] = a0			# LN: 88 | 
340   	 00DF				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
341   	 00DF	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 89 | 
342   	 00E0	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 89 | 
343   	 00E1	 88140000		a0 = xmem[i0]			# LN: 89 | 
344   	 00E2	 00004E00		a0 = a0 << 1			# LN: 89 | 
345   	 00E3	 B0140001		i0 = xmem[i1]			# LN: 89 | 
346   	 00E4	 00004E00		a0 = a0 << 1			# LN: 89 | 
347   	 00E5	 98540000		xmem[i0] = a0h			# LN: 89 | 
348   	 00E6				cline_89_0:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
349   	 00E6				endif_5:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
350   	 00E6	 800800ED		jmp (endif_4)			# LN: 81 | 
351   	 00E7				cline_81_1:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
352   	 00E7				else_4:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
353   	 00E7	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 95 | 
354   	 00E8	 A1050000		i1 = (0) + (_p_LFE_channel_out)			# LN: 95 | 
355   	 00E9	 88140000		a0 = xmem[i0]			# LN: 95 | 
356   	 00EA	 B0140001		i0 = xmem[i1]			# LN: 95 | 
357   	 00EB	 00004E00		a0 = a0 << 1			# LN: 95 | 
358   	 00EC	 98540000		xmem[i0] = a0h			# LN: 95 | 
359   	 00ED				cline_95_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
360   	 00ED				endif_2:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
361   	 00ED				endif_4:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
362   	 00ED	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 99 | 
363   	 00EE	 B1040000		i1 = xmem[_p_LFE_channel_out + 0]			# LN: 99 | 
364   	 00EF	 88140000		a0 = xmem[i0]			# LN: 99 | 
365   	 00F0	 00004E40		a0 = a0 >> 1			# LN: 99 | 
366   	 00F1	 98540001		xmem[i1] = a0h			# LN: 99 | 
367   	 00F2	 B0040000		i0 = xmem[_p_LFE_channel_out + 0]			# LN: 99 | 
368   	 00F3	 00007FFF		nop #empty cycle
369   	 00F4	 02087FFF		i0 += 1			# LN: 99 | 
370   	 00F5	 B0440000		xmem[_p_LFE_channel_out + 0] = i0			# LN: 99 | 
371   	 00F6	 800800F7		jmp (endif_1)			# LN: 99 | 
372   	 00F7				cline_99_0:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
373   	 00F7				init_latch_label_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
374   	 00F7				endif_1:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
375   	 00F7				else_1:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
376   	 00F7	 90750003		i0 = i7 - (0x3)			# LN: 39 | 
377   	 00F8	 88140000		a0 = xmem[i0]			# LN: 39 | 
378   	 00F9	 894A0001		uhalfword(a1) = (0x1)			# LN: 39 | 
379   	 00FA	 00004408		a0 = a0 + a1			# LN: 39 | 
380   	 00FB	 90750003		i0 = i7 - (0x3)			# LN: 39 | 
381   	 00FC				label_end_92:			# LN: 39 | CYCLE: 5 | RULES: ()
382   	 00FC	 98540000		xmem[i0] = a0h			# LN: 39 | 
383   	 00FD				cline_39_1:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
384   	 00FD				for_end_0:			/* LN: 39 | CYCLE: 0 | RULES: () */ 
385   	 00FD	 800800FE		jmp (__epilogue_238)			# LN: 102 | 
386   	 00FE				__epilogue_238:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
387   	 00FE	 97750003		i7 = i7 - (0x3)			# LN: 102 | 
388   	 00FF	 02177FFF		i7 -= 1			# LN: 102 | 
389   	 0100	 81880000		ret			# LN: 102 | 
390   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__epilogue_236                                                                  			         Relocatable         processing_GEN_0018:000EH
__epilogue_238                                                                  			         Relocatable         processing_GEN_0018:00FEH
__extractedConst_0_2                                                            			         Relocatable         processing_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         processing_GEN_0001:0000H
__extractedConst_2_1                                                            			         Relocatable         processing_GEN_0002:0000H
__extractedConst_3_1                                                            			         Relocatable         processing_GEN_0003:0000H
__mul_sat_laccum                                                                					 External   
_distorsion_threshold_1                                                         			         Relocatable         processing_GEN_0004:0000H
_distorsion_threshold_2                                                         			         Relocatable         processing_GEN_0005:0000H
_gain                                                                           			         Relocatable         processing_GEN_0006:0000H
_initialize_processing                                                          			  Public Relocatable       processing_GEN_0018:0000H
_input_L_with_stage_two_gain                                                    			  Public Relocatable       processing_GEN_0007:0000H
_input_R_with_stage_two_gain                                                    			  Public Relocatable       processing_GEN_0008:0000H
_mode                                                                           			         Relocatable         processing_GEN_0009:0000H
_p_C_channel_out                                                                			  Public Relocatable       processing_GEN_0010:0000H
_p_LFE_channel_out                                                              			  Public Relocatable       processing_GEN_0011:0000H
_p_LS_channel_out                                                               			  Public Relocatable       processing_GEN_0012:0000H
_p_L_channel_in                                                                 			  Public Relocatable       processing_GEN_0013:0000H
_p_L_channel_out                                                                			  Public Relocatable       processing_GEN_0014:0000H
_p_RS_channel_out                                                               			  Public Relocatable       processing_GEN_0015:0000H
_p_R_channel_in                                                                 			  Public Relocatable       processing_GEN_0016:0000H
_p_R_channel_out                                                                			  Public Relocatable       processing_GEN_0017:0000H
_processing                                                                     			  Public Relocatable       processing_GEN_0018:0011H
cline_20_0                                                                      			  Unused Relocatable        processing_GEN_0018:0007H
cline_21_0                                                                      			  Unused Relocatable        processing_GEN_0018:000AH
cline_22_0                                                                      			  Unused Relocatable        processing_GEN_0018:000DH
cline_26_0                                                                      			  Unused Relocatable        processing_GEN_0018:0018H
cline_29_0                                                                      			  Unused Relocatable        processing_GEN_0018:001BH
cline_30_0                                                                      			  Unused Relocatable        processing_GEN_0018:0020H
cline_32_0                                                                      			  Unused Relocatable        processing_GEN_0018:0023H
cline_33_0                                                                      			  Unused Relocatable        processing_GEN_0018:0028H
cline_34_0                                                                      			  Unused Relocatable        processing_GEN_0018:002DH
cline_35_0                                                                      			  Unused Relocatable        processing_GEN_0018:0032H
cline_36_0                                                                      			  Unused Relocatable        processing_GEN_0018:0037H
cline_37_0                                                                      			  Unused Relocatable        processing_GEN_0018:003CH
cline_39_0                                                                      			  Unused Relocatable        processing_GEN_0018:0040H
cline_39_1                                                                      			  Unused Relocatable        processing_GEN_0018:00FDH
cline_42_0                                                                      			  Unused Relocatable        processing_GEN_0018:004BH
cline_43_0                                                                      			  Unused Relocatable        processing_GEN_0018:0054H
cline_44_0                                                                      			  Unused Relocatable        processing_GEN_0018:005FH
cline_45_0                                                                      			  Unused Relocatable        processing_GEN_0018:0068H
cline_48_0                                                                      			  Unused Relocatable        processing_GEN_0018:0071H
cline_49_0                                                                      			  Unused Relocatable        processing_GEN_0018:007AH
cline_52_0                                                                      			         Relocatable         processing_GEN_0018:0082H
cline_55_0                                                                      			  Unused Relocatable        processing_GEN_0018:008CH
cline_59_0                                                                      			         Relocatable         processing_GEN_0018:0094H
cline_61_0                                                                      			  Unused Relocatable        processing_GEN_0018:0098H
cline_64_0                                                                      			  Unused Relocatable        processing_GEN_0018:009DH
cline_66_0                                                                      			  Unused Relocatable        processing_GEN_0018:00A2H
cline_66_1                                                                      			  Unused Relocatable        processing_GEN_0018:00BEH
cline_68_0                                                                      			  Unused Relocatable        processing_GEN_0018:00A7H
cline_73_0                                                                      			  Unused Relocatable        processing_GEN_0018:00B6H
cline_74_0                                                                      			  Unused Relocatable        processing_GEN_0018:00BDH
cline_79_0                                                                      			  Unused Relocatable        processing_GEN_0018:00C5H
cline_81_0                                                                      			  Unused Relocatable        processing_GEN_0018:00CCH
cline_81_1                                                                      			  Unused Relocatable        processing_GEN_0018:00E7H
cline_83_0                                                                      			  Unused Relocatable        processing_GEN_0018:00D1H
cline_88_0                                                                      			  Unused Relocatable        processing_GEN_0018:00DFH
cline_89_0                                                                      			  Unused Relocatable        processing_GEN_0018:00E6H
cline_95_0                                                                      			  Unused Relocatable        processing_GEN_0018:00EDH
cline_99_0                                                                      			  Unused Relocatable        processing_GEN_0018:00F7H
else_0                                                                          			         Relocatable         processing_GEN_0018:008CH
else_1                                                                          			         Relocatable         processing_GEN_0018:00F7H
else_2                                                                          			         Relocatable         processing_GEN_0018:00BEH
else_3                                                                          			         Relocatable         processing_GEN_0018:00A7H
else_4                                                                          			         Relocatable         processing_GEN_0018:00E7H
else_5                                                                          			         Relocatable         processing_GEN_0018:00D1H
endif_0                                                                         			         Relocatable         processing_GEN_0018:008CH
endif_1                                                                         			         Relocatable         processing_GEN_0018:00F7H
endif_2                                                                         			         Relocatable         processing_GEN_0018:00EDH
endif_3                                                                         			         Relocatable         processing_GEN_0018:00BDH
endif_4                                                                         			         Relocatable         processing_GEN_0018:00EDH
endif_5                                                                         			         Relocatable         processing_GEN_0018:00E6H
for_end_0                                                                       			  Unused Relocatable        processing_GEN_0018:00FDH
init_latch_label_0                                                              			  Unused Relocatable        processing_GEN_0018:00F7H
label_begin_92                                                                  			  Unused Relocatable        processing_GEN_0018:0040H
label_end_92                                                                    			         Relocatable         processing_GEN_0018:00FCH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 processing_GEN_0000                     			 X_OVLY                                  
0001H	 processing_GEN_0001                     			 X_OVLY                                  
0001H	 processing_GEN_0002                     			 X_OVLY                                  
0001H	 processing_GEN_0003                     			 X_OVLY                                  
0001H	 processing_GEN_0004                     			 X_OVLY                                  
0001H	 processing_GEN_0005                     			 X_OVLY                                  
0001H	 processing_GEN_0006                     			 X_OVLY                                  
0001H	 processing_GEN_0007                     			 X_OVLY                                  
0001H	 processing_GEN_0008                     			 X_OVLY                                  
0001H	 processing_GEN_0009                     			 X_OVLY                                  
0001H	 processing_GEN_0010                     			 X_OVLY                                  
0001H	 processing_GEN_0011                     			 X_OVLY                                  
0001H	 processing_GEN_0012                     			 X_OVLY                                  
0001H	 processing_GEN_0013                     			 X_OVLY                                  
0001H	 processing_GEN_0014                     			 X_OVLY                                  
0001H	 processing_GEN_0015                     			 X_OVLY                                  
0001H	 processing_GEN_0016                     			 X_OVLY                                  
0001H	 processing_GEN_0017                     			 X_OVLY                                  
0101H	 processing_GEN_0018                     			 CODE_OVLY                               
